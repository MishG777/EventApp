{"ast":null,"code":"var _jsxFileName = \"D:\\\\UDEMY_REACT_JS_COURSE\\\\Section_20_React_router_BackEnd-FrontEnd\\\\frontend\\\\src\\\\pages\\\\EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const {\n    events\n  } = data;\n  // console.log(data);\n\n  // if (data.isError) {\n  //   //can access isError from data because anything\n  //   //we return from loader can be accessed by useLoaderData()\n  //   return <p>{data.message}</p>;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this)\n  // <>\n  //   <EventsList events={events} />\n  // </>\n  ;\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch!\" };\n    // throw new Error({ message: \"Could not fetch events!\" });\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events!\" }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events!\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport const loader = () => {\n  return defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","EventsPage","data","events","loadEvents","response","fetch","ok","message","status","loader"],"sources":["D:/UDEMY_REACT_JS_COURSE/Section_20_React_router_BackEnd-FrontEnd/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { useLoaderData, json, defer } from \"react-router-dom\";\r\n\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n  const { events } = data;\r\n  // console.log(data);\r\n\r\n  // if (data.isError) {\r\n  //   //can access isError from data because anything\r\n  //   //we return from loader can be accessed by useLoaderData()\r\n  //   return <p>{data.message}</p>;\r\n  // }\r\n\r\n  return (\r\n    <Await resolve={events}></Await>\r\n    // <>\r\n    //   <EventsList events={events} />\r\n    // </>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: \"Could not fetch!\" };\r\n    // throw new Error({ message: \"Could not fetch events!\" });\r\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events!\" }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json({ message: \"Could not fetch events!\" }, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport const loader = () => {\r\n  return defer({\r\n    events: loadEvents(),\r\n  });\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAQ,kBAAkB;AAE7D,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAElD,SAASC,UAAU,GAAG;EAAA;EACpB,MAAMC,IAAI,GAAGL,aAAa,EAAE;EAC5B,MAAM;IAAEM;EAAO,CAAC,GAAGD,IAAI;EACvB;;EAEA;EACA;EACA;EACA;EACA;;EAEA,oBACE,QAAC,KAAK;IAAC,OAAO,EAAEC;EAAO;IAAA;IAAA;IAAA;EAAA;EACvB;EACA;EACA;EAAA;AAEJ;AAAC,GAjBQF,UAAU;EAAA,QACJJ,aAAa;AAAA;AAAA,KADnBI,UAAU;AAmBnB,eAAeA,UAAU;AAEzB,eAAeG,UAAU,GAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA;IACA,MAAMT,IAAI,CAAC;MAAEU,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,MAAMK,MAAM,GAAG,MAAM;EAC1B,OAAOX,KAAK,CAAC;IACXI,MAAM,EAAEC,UAAU;EACpB,CAAC,CAAC;AACJ,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}